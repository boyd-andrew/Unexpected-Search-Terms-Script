// To change the date range for pulling data, replace "LAST_MONTH" in the `account.getStatsFor("LAST_MONTH")` line 
// with any supported date range constant, such as "THIS_MONTH", "LAST_7_DAYS", "LAST_30_DAYS", or a custom date range.
// Additionally, modify the `firstDayOfMonth` and `lastDayOfMonth` variables in the `processAccount` function
// to define a specific start and end date for your query. Supported constants and formats can be found in the Google Ads API documentation.

const SHEET_URL = 'PROVIDE SHEET URL HERE'; //Create a new Google Sheet and enter it here
const ADVERTISING_CHANNEL_TYPE = "SEARCH";
const TIME_ZONE = "America/Los_Angeles";

function main() {
  const spreadsheet = SpreadsheetApp.openByUrl(SHEET_URL);
  const accountIterator = MccApp.accounts().get();
  
  while (accountIterator.hasNext()) {
    const account = accountIterator.next();
    const lastMonthStats = account.getStatsFor("LAST_MONTH");
    
    if (lastMonthStats.getImpressions() > 0) {
      MccApp.select(account); 
      processAccount(account, spreadsheet); 
    }
  }
}

function processAccount(account, spreadsheet) {
  const accountName = account.getName();
  let sheet = spreadsheet.getSheetByName(accountName) || spreadsheet.insertSheet(accountName);
  
  sheet.clear();
  sheet.getRange(1, 1, 1, 9).setValues([[
    'Month-Year', 'Campaign Name', 'Ad Group Name', 'Keyword', 'Search Term', 'Clicks', 'Spend', 'Cost/Click', 'Conversions'
  ]]);
  sheet.getRange(1, 1, 1, 9).setFontWeight('bold').setBackground('#4CAF50').setFontColor('white');
  
  const lastMonthDate = new Date();
  lastMonthDate.setMonth(lastMonthDate.getMonth() - 1);
  const monthYear = Utilities.formatDate(lastMonthDate, TIME_ZONE, "MMMM yyyy");
  
  const firstDayOfMonth = Utilities.formatDate(lastMonthDate, TIME_ZONE, "yyyy-MM-01");
  const lastDayOfMonth = Utilities.formatDate(lastMonthDate, TIME_ZONE, "yyyy-MM-") + daysInMonth(lastMonthDate);
  
  const query = `
    SELECT
      campaign.name,
      ad_group.name,
      segments.keyword.info.text,
      search_term_view.search_term,
      metrics.clicks,
      metrics.cost_micros,
      metrics.conversions
    FROM
      search_term_view
    WHERE
      metrics.cost_micros > 0
      AND segments.date BETWEEN '${firstDayOfMonth}' AND '${lastDayOfMonth}'
      AND campaign.advertising_channel_type = '${ADVERTISING_CHANNEL_TYPE}'
  `;
  
  const report = AdsApp.report(query);
  const rows = report.rows();
  const data = [];
  
  while (rows.hasNext()) {
    const row = rows.next();
    const keywordText = row['segments.keyword.info.text'].toLowerCase().split(" ");
    const searchTerm = row['search_term_view.search_term'].toLowerCase();
    
    const cost = row['metrics.cost_micros'] / 1e6; 
    const clicks = row['metrics.clicks'];
    const costPerClick = clicks > 0 ? cost / clicks : 0;
    
    // Check if search term contains any of the keywords' words
    const searchTermWords = searchTerm.split(" ");
    const hasMatchingWord = searchTermWords.some(word => keywordText.includes(word));

    // Log only if no words from the keyword match the search term
    if (!hasMatchingWord) {
      data.push([
        monthYear,
        row['campaign.name'],
        row['ad_group.name'],
        row['segments.keyword.info.text'],
        row['search_term_view.search_term'],
        clicks,
        cost,
        costPerClick,
        row['metrics.conversions']
      ]);
    }
  }
  
  if (data.length > 0) {
    sheet.getRange(2, 1, data.length, data[0].length).setValues(data);
    formatSheet(sheet, data.length);
  }
}

function formatSheet(sheet, numRows) {
  sheet.getRange(2, 7, numRows, 1).setNumberFormat("$#,##0.00");
  sheet.getRange(2, 8, numRows, 1).setNumberFormat("$#,##0.00");
  sheet.getRange(2, 6, numRows, 1).setNumberFormat("#,##0");
  sheet.getRange(2, 9, numRows, 1).setNumberFormat("#,##0");

  const range = sheet.getRange(2, 1, numRows, 9);
  const banding = range.applyRowBanding(SpreadsheetApp.BandingTheme.LIGHT_GREY);
  banding.setFirstRowColor('#f0f0f0').setSecondRowColor('#ffffff');

  sheet.getRange(2, 1, numRows, 9).sort({ column: 7, ascending: false });
}

function daysInMonth(date) {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
}
